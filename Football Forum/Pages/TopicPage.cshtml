@using EPAM.FootballForum.Common.Entities;
@using EPAM.FootballForum.Common.Dependencies;
@using NLog;
@{
    Logger logger = LogManager.GetCurrentClassLogger();
    var id = Request.QueryString["id"];
    int topicID;
    Int32.TryParse(id, out topicID);
    Topic topic = new Topic();
    IEnumerable<Message> messages = new List<Message> { };
    try
    {
        topic = DependencyResolver.Instance.TopicBLL.GetTopicById(topicID);
        Layout = "~/Layouts/_BasicLayout.cshtml";
        Page.Title = topic.Text;
        logger.Info($"User {User.Identity.Name} at Topic Page", User.Identity.Name);
        string text = Request["text"];
        messages = DependencyResolver.Instance.MessageBLL.GetAllTopicMessages(topicID);
        User user = DependencyResolver.Instance.UserBLL.GetUser(User.Identity.Name);
        if (IsPost)
        {
            Message newMessage = new Message(topicID, user.ID, text, DateTime.Now, DateTime.Now);
            DependencyResolver.Instance.MessageBLL.AddMessage(newMessage);
            Response.Redirect("~/Pages/TopicRedirectPage?id=" + topicID, false);
        }
    } catch (Exception ex)
    {
        logger.Error(ex, "This exception came from topic page.");
        Response.Redirect("~/Pages/ErrorPage");
    }
}

@if (!User.Identity.IsAuthenticated)
{
    <section class="main-content flex-column flex-row" id="content">
        <div class="main-content__center flex-column flex-start">
            <div id="errorBox">
                <div class="error-div">
                    Для просмотра этой страницы необходимо зарегистрироваться.
                </div>
            </div>
        </div>
    </section>
}
else
{
    <section class="main-content flex-column flex-row" id="content">
        <div class="main-content__center flex-column flex-start">
            <div class="message flex-column flex-row">
                <div class="message-block message-name">
                    <p>@topic.Text</p>
                </div>
                <div class="message-block info">
                    <p>Автором данной темы является @topic.Author</p>
                    <p>Тема создана @topic.CreatedAt</p>
                </div>
            </div>
            @foreach (var item in messages)
            {
                <div class="message flex-column flex-row">
                    <div class="message-block message-name">
                        <p>@item.Text</p>
                    </div>
                    <div class="message-block info">
                        <p id="@DependencyResolver.Instance.UserBLL.GetUser(item.Author).ID" class="topic-name">@item.Author</p>
                        <p>@item.CreatedAt</p>
                        @if (User.IsInRole("Administrator"))
                        {
                            <button id="@item.ID" type="button" class="btn btn-danger">Удалить сообщение</button>
                        }
                    </div>
                </div>
            }
            <button class="add-message-btn" id="add_message_btn">Добавить сообщение</button>
            <form class="add-topic-form flex-column  invisible" method="post" id="add_message_form">
                <textarea class="add-topic-form__textarea" name="text" rows="5" id="textarea"></textarea>
                <input type="submit" value="Отправить" class="add-topic-form add-topic-form__btn">
            </form>
            <div id="errorBox">

            </div>
        </div>
    </section>
}

<script type="text/javascript">

    const AddMessage = function () {
        let addMessageForm = document.getElementById('add_message_form');
        let addMessageBtn = document.getElementById('add_message_btn');

        addMessageBtn.addEventListener("click", () => {
            addMessageForm.classList.toggle('invisible');
            errorBox.classList.toggle('invisible');
        });

        addMessageForm.addEventListener("submit", (event) => {
            if (!checkValidity()) {
                event.preventDefault();
            }
        });

        function checkValidity() {
            const textRegex = /^[^\s]/g;
            let textArea = document.getElementById('textarea');
            if (!textRegex.test(textArea.value)) {
                showError(errorBox, "Пожалуйста, не начинайте свое сообщение с пробелов.");
                return false;
            }
            return true;
        }

        function showError(elem, message) {
            elem.innerHTML = "";
            let errorDiv = document.createElement('div');
            elem.append(errorDiv);
            elem.className = "error-div_topic";
            elem.innerHTML = message;
        }
    }

    const GoToAuthorPage = function () {
        const topicNames = document.getElementsByClassName('topic-name');
        for (var i = 0; i < topicNames.length; i++) {
            topicNames[i].addEventListener("click", (event) => {
                document.location.href = "PersonalPage.cshtml?id=" + event.target.id;
            });
        };
    };

    const DeleteMessage = function () {
        const deletebtn = document.getElementsByClassName('btn btn-danger');
        for (var i = 0; i < deletebtn.length; i++) {
            deletebtn[i].addEventListener("click", (event) => {
                $.ajax({
                    method: "POST",
                    url: "DeleteMessage.cshtml",
                    data: { msgID: event.target.id },
                    success: [function () {
                        event.target.parentNode.parentNode.innerHTML = "Данное сообщение было удалено."
                    }]
                });
            });
        };
    }

    DeleteMessage();
    AddMessage();
    GoToAuthorPage();

</script>
