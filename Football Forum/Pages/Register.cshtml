@using EPAM.FootballForum.Common.Entities;
@using EPAM.FootballForum.PL.Web.Models;
@using EPAM.FootballForum.Common.Dependencies;
@using NLog;
@{
    Logger logger = LogManager.GetCurrentClassLogger();
    PasswordHasher hasher = new PasswordHasher();
    SearchUserAuthData userFoundState = new SearchUserAuthData();
    string login = Request["login"];
    string email = Request["e-mail"];
    string age = Request["age"];
    try
    {
        Layout = "~/Layouts/_BasicLayout.cshtml";
        Page.Title = "Страница регистрации";
        logger.Info("User at Register Page");
        if (IsPost)
        {
            userFoundState.LoginStatus(false);
            userFoundState.EmailStatus(false);
            if (login == DependencyResolver.Instance.UserBLL.CheckUserAuthData(login, email)[0])
            {
                userFoundState.LoginStatus(true);
            }
            else if (email == DependencyResolver.Instance.UserBLL.CheckUserAuthData(login, email)[1])
            {
                userFoundState.EmailStatus(true);
            }
            else
            {
                string password = Request["password"];
                int userAge;
                Int32.TryParse(age, out userAge);
                User user = new User(login, userAge, email, hasher.GetHash(password), DateTime.Now.ToString(), "User", "");
                DependencyResolver.Instance.UserBLL.AddUser(user);
                Response.Redirect("~/Pages/LogIn", false);
            }
        }
    } catch (Exception ex)
    {
        logger.Error(ex, "This exception came from register page.");
        Response.Redirect("~/Pages/ErrorPage");
    }
}

@if (!User.Identity.IsAuthenticated)
{
    <section class="main-content flex-column flex-row">
        <div class="main-content__center flex-column flex-start" id="content">
            <form class="log-form" method="post" id="logForm">
                <label for="login">Введите логин:</label>
                <input type="text" class="log-form__input" name="login" placeholder="Введите имя:" id="login" maxlength="25"  value="@login" required>
                <label for="e-mail">Введите адрес электронной почты:</label>
                <input type="text" class="log-form__input" name="e-mail" placeholder="ivanov@yandex.ru" id="e-mail" value="@email" required>
                <label for="age">Введите свой возраст:</label>
                <input type="text" class="log-form__input" name="age" placeholder="28" id="age" value="@age" required>
                <label for="password">Введите пароль:</label>
                <input type="password" class="log-form__input" name="password" id="password" required>
                <label for="confirmPassword">Повторите введнный пароль:</label>
                <input type="password" class="log-form__input" name="confirmPassword" id="confirmPassword" required>
                <input type="submit" class="log-form__input submit-btn" name="" value="Зарегестрироваться!">
            </form>
            <div id="errorBox">
                @if (IsPost && userFoundState.LoginIsFound)
                {
                    <div class="error-div">
                        Пользователь с таким логином уже существует!
                    </div>
                }
                @if (IsPost && userFoundState.EmailIsFound)
                {
                    <div class="error-div">
                        Пользователь с таким адресом электронной почты уже существует!
                    </div>
                }
            </div>
        </div>
    </section>
}
else
{
    <section class="main-content flex-column flex-row">
        <div class="main-content__center flex-column flex-start" id="content">
            <div id="errorBox">
                <div class="error-div">
                    Для входа на эту страницу необходимо разлогиниться.
                </div>
            </div>
        </div>
    </section>
}

<script type="text/javascript">
    let form = document.getElementById('logForm');

    form.addEventListener("submit", (event) => {
        if (!checkValidity()) {
            event.preventDefault();
        }
    })

    function checkValidity() {
        const loginRegex = /^[^\s]{2,}_?[^\s]*$/g;
        const emailRegex = /^\w{2,}@@{1}\w{2,}\.{1}[A-Za-z]{2,}$/g;
        const ageRegex = /^\d{1,2}$/g;
        const passwordRegex = /(\w{3,}[.,:!?()*]{2,})|([.,:!?()*]{2,}\w{3,})/g;
        let errorBox = document.getElementById('errorBox');
        let loginInput = document.getElementById('login');
        let emailInput = document.getElementById('e-mail');
        let ageInput = document.getElementById('age');
        let password = document.getElementById('password');
        let confirmPassword = document.getElementById('confirmPassword');

        for (var i = 0; i < form.elements.length; i++) {
            form[i].classList.remove("error-border");
        }

        if (!loginRegex.test(loginInput.value.trim())) {
            loginInput.classList.add("error-border");
            showError(errorBox, "Имя не должно включать пробельных символов. Минимальная длина имени 2 символа. Вместо пробелов используйтие нижнее подчеркивание.");
            return false;
        } else if (!emailRegex.test(emailInput.value)) {
            emailInput.classList.add("error-border");
            showError(errorBox, "Вы указали неверный e-mail.");
            return false;
        } else if (!ageRegex.test(ageInput.value)) {
            ageInput.classList.add("error-border");
            showError(errorBox, "Вы указали неверный возраст, должен быть в пределах от 1 от 99.");
            return false;
        } else if (!passwordRegex.test(password.value)) {
            password.classList.add("error-border");
            showError(errorBox, "Пароль должен содержать минимум 5 знаков (заглавные и строчные латинские буквы, цифры) и включать в себя минимум 2 символа из приведенного списка .,:!?()*");
            return false;
        } else if (confirmPassword.value !== password.value) {
            confirmPassword.classList.add("error-border");
            showError(errorBox, "Пароль введенный в поле подтверждения не совпадает с введенным ранее.");
            return false;
        } else {
            return true;
        }
    }

    function showError(elem, message) {
        elem.innerHTML = "";
        let errorDiv = document.createElement('div');
        elem.append(errorDiv);
        elem.className = "error-div";
        elem.innerHTML = message;
    }
</script>
